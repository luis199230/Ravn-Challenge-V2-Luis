{"ast":null,"code":"var _jsxFileName = \"/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, CardBody, CardHeader, CardSubtitle, Spinner } from 'reactstrap';\nimport { ALL_CHARACTERS, FIND_CHARACTER_BY_ID } from \"./queries\"; //import mobiscroll from \"@mobiscroll/react-lite\";\n//import '@mobiscroll/react-lite/dist/css/mobiscroll.min.css';\n//import api from \"./hocs/characters\";\n//import VehicleItem from \"./templates/vehicleItem\";\n//import PeopleItem from \"./templates/peopleItem\";\n//import CharacteristicItem from \"./templates/characteristicItem\";\n\nlet getAllCharacters;\nlet character;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    getAllCharacters = useQuery(ALL_CHARACTERS);\n    character = useQuery(FIND_CHARACTER_BY_ID, {\n      variables: {\n        id: 'cGVvcGxlOjE='\n      }\n    });\n    if (getAllCharacters.loading || character.loading) return React.createElement(Spinner, {\n      color: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n    if (getAllCharacters.error || character.error) return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Error :(\");\n    /*this.state = {\n      characters: api.listCharacters(),\n      selectedCharacter: null,\n      data: []\n    };\n    this.getData();*/\n  }\n\n  render() {\n    /*let content = '';\n    const selectedPerson = this.state.selectedPerson;\n     if(selectedPerson !== null){\n      content = (<div className=\"mbsc-form-grid\">\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">General information</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={CharacteristicItem} data={this.state.characteristics}/>\n        </mobiscroll.CardContent>\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">Vehicles</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={VehicleItem} data={this.state.vehicles}/>\n        </mobiscroll.CardContent>\n      </div>);\n    }\n     return (\n      <mobiscroll.Form theme=\"mobiscroll\" className=\"md-master-detail-demo\">\n        <div className=\"mbsc-grid mbsc-no-padding\">\n          <div className=\"mbsc-row\">\n            <div className=\"mbsc-col-12 mbsc-col-md-2 mbsc-col-sm-3\">\n              <mobiscroll.Listview select=\"single\" itemType={PeopleItem} data={this.state.people} onItemTap={this.changePerson} />\n            </div>\n            <div className=\"mbsc-col-12 mbsc-col-md-10 mbsc-col-sm-9 md-col-border\">\n              {content}\n            </div>\n          </div>\n        </div>\n      </mobiscroll.Form>\n    );*/\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Query - Displaying all data\"), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, JSON.stringify(getAllCharacters.data, null, 2)))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Query - Displaying data with args\"), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(CardSubtitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Viewing a user by id\"), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, JSON.stringify(character.data, null, 2)))));\n  }\n  /*getData() {\n    return [];\n  }\n   changePerson = (event, inst) => {\n    this.setState({ selectedPerson: this.state.data[event.index]});\n  }*/\n\n\n}\n\nrender(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js"],"names":["React","render","useQuery","Card","CardBody","CardHeader","CardSubtitle","Spinner","ALL_CHARACTERS","FIND_CHARACTER_BY_ID","getAllCharacters","character","App","Component","constructor","props","variables","id","loading","error","JSON","stringify","data","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,YAArC,EAAmDC,OAAnD,QAAkE,YAAlE;AAEA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,WAArD,C,CAEA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,IAAIC,gBAAJ;AACA,IAAIC,SAAJ;;AAEA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEAL,IAAAA,gBAAgB,GAAGR,QAAQ,CAACM,cAAD,CAA3B;AACAG,IAAAA,SAAS,GAAGT,QAAQ,CAACO,oBAAD,EAAuB;AAAEO,MAAAA,SAAS,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN;AAAb,KAAvB,CAApB;AACA,QAAIP,gBAAgB,CAACQ,OAAjB,IAA4BP,SAAS,CAACO,OAA1C,EAAmD,OAAO,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACnD,QAAIR,gBAAgB,CAACS,KAAjB,IAA0BR,SAAS,CAACQ,KAAxC,EAA+C,OAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAE/C;;;;;;AAMD;;AAEDlB,EAAAA,MAAM,GAAG;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGmB,IAAI,CAACC,SAAL,CAAeX,gBAAgB,CAACY,IAAhC,EAAsC,IAAtC,EAA4C,CAA5C,CADH,CADA,CAFF,CADF,EASE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADF,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCF,IAAI,CAACC,SAAL,CAAeV,SAAS,CAACW,IAAzB,EAA+B,IAA/B,EAAqC,CAArC,CADD,CAFF,CAFF,CATF,CADF;AAqBD;AACD;;;;;;;;AA1EgC;;AAmFlCrB,MAAM,CAAC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAASsB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAT,CAAN","sourcesContent":["import React from \"react\";\nimport {render} from \"react-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, CardBody, CardHeader, CardSubtitle, Spinner } from 'reactstrap';\n\nimport { ALL_CHARACTERS, FIND_CHARACTER_BY_ID } from \"./queries\";\n\n//import mobiscroll from \"@mobiscroll/react-lite\";\n//import '@mobiscroll/react-lite/dist/css/mobiscroll.min.css';\n\n//import api from \"./hocs/characters\";\n\n//import VehicleItem from \"./templates/vehicleItem\";\n//import PeopleItem from \"./templates/peopleItem\";\n//import CharacteristicItem from \"./templates/characteristicItem\";\n\nlet getAllCharacters;\nlet character;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    getAllCharacters = useQuery(ALL_CHARACTERS);\n    character = useQuery(FIND_CHARACTER_BY_ID, { variables: { id: 'cGVvcGxlOjE=' }});\n    if (getAllCharacters.loading || character.loading) return <Spinner color=\"dark\" />;\n    if (getAllCharacters.error || character.error) return <React.Fragment>Error :(</React.Fragment>;\n\n    /*this.state = {\n      characters: api.listCharacters(),\n      selectedCharacter: null,\n      data: []\n    };\n    this.getData();*/\n  }\n\n  render() {\n    /*let content = '';\n    const selectedPerson = this.state.selectedPerson;\n\n    if(selectedPerson !== null){\n      content = (<div className=\"mbsc-form-grid\">\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">General information</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={CharacteristicItem} data={this.state.characteristics}/>\n        </mobiscroll.CardContent>\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">Vehicles</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={VehicleItem} data={this.state.vehicles}/>\n        </mobiscroll.CardContent>\n      </div>);\n    }\n\n    return (\n      <mobiscroll.Form theme=\"mobiscroll\" className=\"md-master-detail-demo\">\n        <div className=\"mbsc-grid mbsc-no-padding\">\n          <div className=\"mbsc-row\">\n            <div className=\"mbsc-col-12 mbsc-col-md-2 mbsc-col-sm-3\">\n              <mobiscroll.Listview select=\"single\" itemType={PeopleItem} data={this.state.people} onItemTap={this.changePerson} />\n            </div>\n            <div className=\"mbsc-col-12 mbsc-col-md-10 mbsc-col-sm-9 md-col-border\">\n              {content}\n            </div>\n          </div>\n        </div>\n      </mobiscroll.Form>\n    );*/\n    return (\n      <div className=\"container\">\n        <Card>\n          <CardHeader>Query - Displaying all data</CardHeader>\n          <CardBody>\n          <pre>\n            {JSON.stringify(getAllCharacters.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardHeader>Query - Displaying data with args</CardHeader>\n          <CardBody>\n            <CardSubtitle>Viewing a user by id</CardSubtitle>\n            <pre>\n            {JSON.stringify(character.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n  /*getData() {\n    return [];\n  }\n\n  changePerson = (event, inst) => {\n    this.setState({ selectedPerson: this.state.data[event.index]});\n  }*/\n}\n\nrender(<App/>, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}