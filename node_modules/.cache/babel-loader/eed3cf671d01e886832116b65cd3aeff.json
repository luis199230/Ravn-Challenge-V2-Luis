{"ast":null,"code":"var _jsxFileName = \"/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\"; //import \"./styles.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://swapi-graphql-ravn.herokuapp.com/\"\n});\n\nasync function listCharacters() {\n  let data = await client.query({\n    query: gql`\n      {\n          allPeople(first:5) {\n            pageInfo{\n                hasNextPage\n            }\n            edges {\n              cursor    \n              node {\n                id\n                name\n                species{\n                  name\n                }\n                homeworld {\n                  name\n                }\n              }\n            }\n          }\n        }\n    `\n  });\n}\n\nconst CharactersQuery = () => {\n  return React.createElement(Query, {\n    query: gql`\n        {\n          allPeople(first:5) {\n            pageInfo{\n                hasNextPage\n            }\n            edges {\n              cursor    \n              node {\n                id\n                name\n                species{\n                  name\n                }\n                homeworld {\n                  name\n                }\n              }\n            }\n          }\n        }\n      `,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Loading...\");\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Error!\");\n    return data.allPeople.edges.map(item => {\n      return React.createElement(\"p\", {\n        key: item.node.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, item.node.name);\n    });\n  });\n};\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(CharactersQuery, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }));\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n})), rootElement);","map":{"version":3,"sources":["/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js"],"names":["React","ReactDOM","ApolloClient","gql","ApolloProvider","Query","client","uri","listCharacters","data","query","CharactersQuery","loading","error","allPeople","edges","map","item","node","id","name","App","rootElement","document","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,IAAsBC,GAAtB,QAAgC,cAAhC;AACA,SAAQC,cAAR,EAAwBC,KAAxB,QAAoC,cAApC,C,CAEA;;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,eAAeC,cAAf,GAAgC;AAC9B,MAAIC,IAAI,GAAG,MAAMH,MAAM,CAACI,KAAP,CAAa;AAC5BA,IAAAA,KAAK,EAAEP,GAAI;;;;;;;;;;;;;;;;;;;;;;AADiB,GAAb,CAAjB;AAwBD;;AAED,MAAMQ,eAAe,GAAG,MAAM;AAC5B,SACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAER,GAAI;;;;;;;;;;;;;;;;;;;;;OADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAwBG,CAAC;AAACS,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBJ,IAAAA;AAAjB,GAAD,KAA4B;AAC3B,QAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACX,WAAOJ,IAAI,CAACK,SAAL,CAAeC,KAAf,CAAqBC,GAArB,CAAyBC,IAAI,IAAI;AACtC,aAAO;AAAG,QAAA,GAAG,EAAEA,IAAI,CAACC,IAAL,CAAUC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuBF,IAAI,CAACC,IAAL,CAAUE,IAAjC,CAAP;AACD,KAFM,CAAP;AAGD,GA9BH,CADF;AAkCD,CAnCD;;AAqCA,SAASC,GAAT,GAAe;AACb,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAvB,QAAQ,CAACwB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEnB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEgB,WAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient, {gql} from \"apollo-boost\";\nimport {ApolloProvider, Query} from \"react-apollo\";\n\n//import \"./styles.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://swapi-graphql-ravn.herokuapp.com/\"\n});\n\nasync function listCharacters() {\n  let data = await client.query({\n    query: gql`\n      {\n          allPeople(first:5) {\n            pageInfo{\n                hasNextPage\n            }\n            edges {\n              cursor    \n              node {\n                id\n                name\n                species{\n                  name\n                }\n                homeworld {\n                  name\n                }\n              }\n            }\n          }\n        }\n    `\n  });\n}\n\nconst CharactersQuery = () => {\n  return (\n    <Query\n      query={gql`\n        {\n          allPeople(first:5) {\n            pageInfo{\n                hasNextPage\n            }\n            edges {\n              cursor    \n              node {\n                id\n                name\n                species{\n                  name\n                }\n                homeworld {\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n    >\n      {({loading, error, data}) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error!</p>;\n        return data.allPeople.edges.map(item => {\n          return <p key={item.node.id}>{item.node.name}</p>;\n        });\n      }}\n    </Query>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CharactersQuery/>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App/>\n  </ApolloProvider>,\n  rootElement\n);\n"]},"metadata":{},"sourceType":"module"}