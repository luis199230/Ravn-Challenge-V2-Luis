{"ast":null,"code":"var _jsxFileName = \"/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nconst client = new ApolloClient({\n  uri: 'https://swapi-graphql-ravn.herokuapp.com/'\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n})), document.getElementById('root')); //import mobiscroll from \"@mobiscroll/react-lite\";\n//import '@mobiscroll/react-lite/dist/css/mobiscroll.min.css';\n//import api from \"./hocs/characters\";\n//import VehicleItem from \"./templates/vehicleItem\";\n//import PeopleItem from \"./templates/peopleItem\";\n//import CharacteristicItem from \"./templates/characteristicItem\";\n\n/*let getAllCharacters;\nlet character;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    getAllCharacters = useQuery(ALL_CHARACTERS);\n    character = useQuery(FIND_CHARACTER_BY_ID, { variables: { id: 'cGVvcGxlOjE=' }});\n    if (getAllCharacters.loading || character.loading) return <Spinner color=\"dark\" />;\n    if (getAllCharacters.error || character.error) return <React.Fragment>Error :(</React.Fragment>;\n\n    this.state = {\n      characters: api.listCharacters(),\n      selectedCharacter: null,\n      data: []\n    };\n    this.getData();\n  }\n\n  render() {\n    let content = '';\n    const selectedPerson = this.state.selectedPerson;\n\n    if(selectedPerson !== null){\n      content = (<div className=\"mbsc-form-grid\">\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">General information</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={CharacteristicItem} data={this.state.characteristics}/>\n        </mobiscroll.CardContent>\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">Vehicles</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={VehicleItem} data={this.state.vehicles}/>\n        </mobiscroll.CardContent>\n      </div>);\n    }\n\n    return (\n      <mobiscroll.Form theme=\"mobiscroll\" className=\"md-master-detail-demo\">\n        <div className=\"mbsc-grid mbsc-no-padding\">\n          <div className=\"mbsc-row\">\n            <div className=\"mbsc-col-12 mbsc-col-md-2 mbsc-col-sm-3\">\n              <mobiscroll.Listview select=\"single\" itemType={PeopleItem} data={this.state.people} onItemTap={this.changePerson} />\n            </div>\n            <div className=\"mbsc-col-12 mbsc-col-md-10 mbsc-col-sm-9 md-col-border\">\n              {content}\n            </div>\n          </div>\n        </div>\n      </mobiscroll.Form>\n    );\n    return (\n      <div className=\"container\">\n        <Card>\n          <CardHeader>Query - Displaying all data</CardHeader>\n          <CardBody>\n          <pre>\n            {JSON.stringify(getAllCharacters.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardHeader>Query - Displaying data with args</CardHeader>\n          <CardBody>\n            <CardSubtitle>Viewing a user by id</CardSubtitle>\n            <pre>\n            {JSON.stringify(character.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n  getData() {\n    return [];\n  }\n\n  changePerson = (event, inst) => {\n    this.setState({ selectedPerson: this.state.data[event.index]});\n  }\n}\n\nrender(<App/>, document.getElementById(\"root\"));\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);*/","map":{"version":3,"sources":["/Users/luisbenavides/Sites/listview-master-detail-viewdemo/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","client","uri","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIAL,QAAQ,CAACM,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAQA;AACA;AAEA;AAEA;AACA;AACA;;AAEA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'https://swapi-graphql-ravn.herokuapp.com/'\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n\n//import mobiscroll from \"@mobiscroll/react-lite\";\n//import '@mobiscroll/react-lite/dist/css/mobiscroll.min.css';\n\n//import api from \"./hocs/characters\";\n\n//import VehicleItem from \"./templates/vehicleItem\";\n//import PeopleItem from \"./templates/peopleItem\";\n//import CharacteristicItem from \"./templates/characteristicItem\";\n\n/*let getAllCharacters;\nlet character;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    getAllCharacters = useQuery(ALL_CHARACTERS);\n    character = useQuery(FIND_CHARACTER_BY_ID, { variables: { id: 'cGVvcGxlOjE=' }});\n    if (getAllCharacters.loading || character.loading) return <Spinner color=\"dark\" />;\n    if (getAllCharacters.error || character.error) return <React.Fragment>Error :(</React.Fragment>;\n\n    this.state = {\n      characters: api.listCharacters(),\n      selectedCharacter: null,\n      data: []\n    };\n    this.getData();\n  }\n\n  render() {\n    let content = '';\n    const selectedPerson = this.state.selectedPerson;\n\n    if(selectedPerson !== null){\n      content = (<div className=\"mbsc-form-grid\">\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">General information</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={CharacteristicItem} data={this.state.characteristics}/>\n        </mobiscroll.CardContent>\n        <mobiscroll.CardHeader>\n          <span className=\"mbsc-bold\">Vehicles</span>\n        </mobiscroll.CardHeader>\n        <mobiscroll.CardContent>\n          <mobiscroll.Listview itemType={VehicleItem} data={this.state.vehicles}/>\n        </mobiscroll.CardContent>\n      </div>);\n    }\n\n    return (\n      <mobiscroll.Form theme=\"mobiscroll\" className=\"md-master-detail-demo\">\n        <div className=\"mbsc-grid mbsc-no-padding\">\n          <div className=\"mbsc-row\">\n            <div className=\"mbsc-col-12 mbsc-col-md-2 mbsc-col-sm-3\">\n              <mobiscroll.Listview select=\"single\" itemType={PeopleItem} data={this.state.people} onItemTap={this.changePerson} />\n            </div>\n            <div className=\"mbsc-col-12 mbsc-col-md-10 mbsc-col-sm-9 md-col-border\">\n              {content}\n            </div>\n          </div>\n        </div>\n      </mobiscroll.Form>\n    );\n    return (\n      <div className=\"container\">\n        <Card>\n          <CardHeader>Query - Displaying all data</CardHeader>\n          <CardBody>\n          <pre>\n            {JSON.stringify(getAllCharacters.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardHeader>Query - Displaying data with args</CardHeader>\n          <CardBody>\n            <CardSubtitle>Viewing a user by id</CardSubtitle>\n            <pre>\n            {JSON.stringify(character.data, null, 2)}\n          </pre>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n  getData() {\n    return [];\n  }\n\n  changePerson = (event, inst) => {\n    this.setState({ selectedPerson: this.state.data[event.index]});\n  }\n}\n\nrender(<App/>, document.getElementById(\"root\"));\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);*/"]},"metadata":{},"sourceType":"module"}